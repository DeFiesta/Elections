{"ast":null,"code":"var _jsxFileName = \"/Users/utilisateur/exercise/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Candidates from './components/Candidates';\n\n// ABIs\nimport Voting from './abis/Voting.json';\n\n// Config\nimport config from './config.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [providers, setProvider] = useState(null);\n  const [voting, setVoting] = useState(null);\n  const [candidates, setCandidate] = useState(null);\n  const [contractOwner, setContractOwner] = useState(null);\n  const loadBlockchainData = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(provider);\n    const network = await provider.getNetwork();\n    const voting = new ethers.Contract(config[network.chainId].Voting.address, Voting, provider);\n    setVoting(voting);\n    const contractOwner = await voting.owner();\n    setContractOwner(contractOwner);\n    const [candidateAddresses, candidateNames, candidateIds, candidateVoteCounts] = await voting.getAllCandidates();\n    const candidateArray = candidateAddresses.map((candidateAddress, index) => {\n      return {\n        address: candidateAddress,\n        name: candidateNames[index],\n        id: candidateIds[index],\n        voteCount: candidateVoteCounts[index]\n      };\n    });\n    setCandidate(candidateArray);\n    window.ethereum.on('accountsChanged', async () => {\n      window.location.reload();\n    });\n  };\n  const addCandidate = async (candidateName, candidateId) => {\n    if (!account) {\n      alert('Please connect your account first');\n      return;\n    }\n    if (!voting) {\n      alert('Voting contract not loaded');\n      return;\n    }\n    if (account !== contractOwner) {\n      alert('Only the contract owner can add candidates');\n      return;\n    }\n    try {\n      const signer = providers.getSigner();\n      const votingWithSigner = voting.connect(signer);\n      const nonce = await providers.getTransactionCount(account);\n      const tx = await votingWithSigner.addCandidate(account, candidateName, candidateId, {\n        nonce\n      });\n      await tx.wait();\n      alert('Candidate added successfully');\n      window.location.reload();\n    } catch (error) {\n      console.error('Error adding candidate:', error);\n      alert('Error adding candidate. Please try again.');\n    }\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-4\",\n      children: /*#__PURE__*/_jsxDEV(Candidates, {\n        candidates: candidates,\n        provider: providers,\n        account: account,\n        voting: voting,\n        onAddCandidate: addCandidate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"vAxQ/QzUJio6YY+tvyrGwoYCito=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","Navigation","Candidates","Voting","config","jsxDEV","_jsxDEV","App","_s","account","setAccount","providers","setProvider","voting","setVoting","candidates","setCandidate","contractOwner","setContractOwner","loadBlockchainData","provider","Web3Provider","window","ethereum","network","getNetwork","Contract","chainId","address","owner","candidateAddresses","candidateNames","candidateIds","candidateVoteCounts","getAllCandidates","candidateArray","map","candidateAddress","index","name","id","voteCount","on","location","reload","addCandidate","candidateName","candidateId","alert","signer","getSigner","votingWithSigner","connect","nonce","getTransactionCount","tx","wait","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onAddCandidate","_c","$RefreshReg$"],"sources":["/Users/utilisateur/exercise/src/App.js"],"sourcesContent":["  import { useEffect, useState } from 'react'\n  import { ethers } from 'ethers'\n\n  // Components\n  import Navigation from './components/Navigation'\n  import Candidates from './components/Candidates'\n\n  // ABIs\n  import Voting from './abis/Voting.json'\n\n  // Config\n  import config from './config.json'\n\n  function App() {\n\n    const [account, setAccount] = useState(null)\n    const [providers, setProvider] = useState(null)\n\n    const [voting, setVoting] = useState(null)\n    const [candidates, setCandidate] = useState(null)\n\n    const [contractOwner, setContractOwner] = useState(null);\n    \n\n\n\n    const loadBlockchainData = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      setProvider(provider);\n\n      const network = await provider.getNetwork();\n      const voting = new ethers.Contract(config[network.chainId].Voting.address, Voting, provider);\n      setVoting(voting);\n\n      const contractOwner = await voting.owner();\n      setContractOwner(contractOwner);\n\n      const [candidateAddresses, candidateNames, candidateIds, candidateVoteCounts] = await voting.getAllCandidates();\n      const candidateArray = candidateAddresses.map((candidateAddress, index) => {\n        return {\n          address: candidateAddress,\n          name: candidateNames[index],\n          id: candidateIds[index],\n          voteCount: candidateVoteCounts[index],\n        };\n      });\n      setCandidate(candidateArray);\n\n      window.ethereum.on('accountsChanged', async () => {\n        window.location.reload();\n      });\n    };\n\n\n\n    const addCandidate = async (candidateName, candidateId) => {\n      \n\n      if (!account) {\n        alert('Please connect your account first');\n        return;\n      }\n\n      if (!voting) {\n        alert('Voting contract not loaded');\n        return;\n      }\n\n      if (account !== contractOwner) {\n        alert('Only the contract owner can add candidates');\n        return;\n      }\n\n      try {\n        const signer = providers.getSigner();\n        const votingWithSigner = voting.connect(signer);\n        const nonce = await providers.getTransactionCount(account);\n\n\n        const tx = await votingWithSigner.addCandidate(account, candidateName, candidateId, { nonce });\n        await tx.wait();\n\n        alert('Candidate added successfully');\n        window.location.reload();\n      } catch (error) {\n        console.error('Error adding candidate:', error);\n        alert('Error adding candidate. Please try again.');\n      }\n    };\n\n    useEffect(() => {\n      loadBlockchainData()\n    }, [])\n\n    return (\n      <div>\n        <Navigation account = {account} setAccount = {setAccount} />\n\n          <div className=\"grid grid-cols-3 gap-4\">\n              <Candidates candidates = {candidates} provider = {providers} account = {account} voting = {voting} onAddCandidate={addCandidate}/>\n          </div>\n      </div>\n    );\n  }\n\n  export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}