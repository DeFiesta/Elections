{"ast":null,"code":"var _jsxFileName = \"/Users/utilisateur/exercise/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Candidates from './components/Candidates';\n\n// ABIs\nimport Voting from './abis/Voting.json';\n\n// Config\nimport config from './config.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [providers, setProvider] = useState(null);\n  const [voting, setVoting] = useState(null);\n  const [candidates, setCandidate] = useState(null);\n  const [contractOwner, setContractOwner] = useState(null);\n  const [toggle, setToggle] = useState(false);\n  const loadBlockchainData = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(provider);\n    const network = await provider.getNetwork();\n    const voting = new ethers.Contract(config[network.chainId].Voting.address, Voting.abi, provider);\n    setVoting(voting);\n    try {\n      const contractOwner = await voting.owner();\n      setContractOwner(contractOwner);\n    } catch (error) {\n      console.error('Error fetching contract owner:', error);\n      alert('Error fetching contract owner. Please make sure the contract is deployed correctly.');\n    }\n    const [candidateAddresses, candidateNames, candidateIds, candidateVoteCounts] = await voting.getAllCandidates();\n    const candidateArray = candidateAddresses.map((candidateAddress, index) => {\n      return {\n        address: candidateAddress,\n        name: candidateNames[index],\n        id: candidateIds[index],\n        voteCount: candidateVoteCounts[index]\n      };\n    });\n    setCandidate(candidateArray);\n    window.ethereum.on('accountsChanged', async () => {\n      window.location.reload();\n    });\n  };\n  const addCandidate = async (candidateAddress, candidateName, candidateId) => {\n    if (!account) {\n      alert('Please connect your account first');\n      return;\n    }\n    if (!voting) {\n      alert('Voting contract not loaded');\n      return;\n    }\n    if (account !== contractOwner) {\n      alert('Only the contract owner can add candidates');\n      console.log(contractOwner);\n      return;\n    }\n    try {\n      const signer = providers.getSigner();\n      const votingWithSigner = voting.connect(signer);\n      const nonce = await providers.getTransactionCount(account);\n      const normalizedCandidateAddress = ethers.utils.getAddress(candidateAddress);\n      const tx = await votingWithSigner.addCandidate(normalizedCandidateAddress, candidateName, candidateId, {\n        nonce\n      });\n      await tx.wait();\n      alert('Candidate added successfully');\n      window.location.reload();\n    } catch (error) {\n      console.error('Error adding candidate:', error);\n      alert('Error adding candidate. Please try again.');\n    }\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  const togglePop = candidates => {\n    setCandidate(candidates);\n    toggle ? setToggle(false) : setToggle(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channels\",\n      children: /*#__PURE__*/_jsxDEV(Candidates, {\n        candidates: candidates,\n        provider: providers,\n        account: account,\n        voting: voting,\n        onAddCandidate: addCandidate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"Lm84lyoRa+4aAIkkNXKyfIQVPLE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","Navigation","Candidates","Voting","config","jsxDEV","_jsxDEV","App","_s","account","setAccount","providers","setProvider","voting","setVoting","candidates","setCandidate","contractOwner","setContractOwner","toggle","setToggle","loadBlockchainData","provider","Web3Provider","window","ethereum","network","getNetwork","Contract","chainId","address","abi","owner","error","console","alert","candidateAddresses","candidateNames","candidateIds","candidateVoteCounts","getAllCandidates","candidateArray","map","candidateAddress","index","name","id","voteCount","on","location","reload","addCandidate","candidateName","candidateId","log","signer","getSigner","votingWithSigner","connect","nonce","getTransactionCount","normalizedCandidateAddress","utils","getAddress","tx","wait","togglePop","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onAddCandidate","_c","$RefreshReg$"],"sources":["/Users/utilisateur/exercise/src/App.js"],"sourcesContent":["  import { useEffect, useState } from 'react'\n  import { ethers } from 'ethers'\n\n  // Components\n  import Navigation from './components/Navigation'\n  import Candidates from './components/Candidates'\n\n  // ABIs\n  import Voting from './abis/Voting.json'\n\n  // Config\n  import config from './config.json'\n\n  function App() {\n\n    const [account, setAccount] = useState(null)\n    const [providers, setProvider] = useState(null)\n\n    const [voting, setVoting] = useState(null)\n    const [candidates, setCandidate] = useState(null)\n\n    const [contractOwner, setContractOwner] = useState(null);\n    const [toggle, setToggle] = useState(false);\n\n\n\n    const loadBlockchainData = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      setProvider(provider);\n\n      const network = await provider.getNetwork();\n\n      const voting = new ethers.Contract(config[network.chainId].Voting.address, Voting.abi, provider);\n      setVoting(voting);\n\n      try {\n        const contractOwner = await voting.owner();\n        setContractOwner(contractOwner);\n      } catch (error) {\n        console.error('Error fetching contract owner:', error);\n        alert('Error fetching contract owner. Please make sure the contract is deployed correctly.');\n      }\n\n      const [candidateAddresses, candidateNames, candidateIds, candidateVoteCounts] = await voting.getAllCandidates();\n      const candidateArray = candidateAddresses.map((candidateAddress, index) => {\n        return {\n          address: candidateAddress,\n          name: candidateNames[index],\n          id: candidateIds[index],\n          voteCount: candidateVoteCounts[index],\n        };\n      });\n      setCandidate(candidateArray);\n\n      window.ethereum.on('accountsChanged', async () => {\n        window.location.reload();\n      });\n    };\n\n\n\n    const addCandidate = async (candidateAddress, candidateName, candidateId) => {\n      if (!account) {\n        alert('Please connect your account first');\n        return;\n      }\n\n      if (!voting) {\n        alert('Voting contract not loaded');\n        return;\n      }\n\n      if (account !== contractOwner) {\n        alert('Only the contract owner can add candidates');\n        console.log(contractOwner)\n        return;\n      }\n\n      try {\n        const signer = providers.getSigner();\n        const votingWithSigner = voting.connect(signer);\n        const nonce = await providers.getTransactionCount(account);\n\n        const normalizedCandidateAddress = ethers.utils.getAddress(candidateAddress);\n\n        const tx = await votingWithSigner.addCandidate(normalizedCandidateAddress, candidateName, candidateId, { nonce });\n        await tx.wait();\n\n        alert('Candidate added successfully');\n        window.location.reload();\n      } catch (error) {\n        console.error('Error adding candidate:', error);\n        alert('Error adding candidate. Please try again.');\n      }\n    };\n\n\n\n    useEffect(() => {\n      loadBlockchainData()\n    }, [])\n\n    const togglePop = (candidates) => {\n      setCandidate(candidates)\n      toggle ? setToggle(false) : setToggle(true);\n    }\n\n    return (\n      <div>\n        <Navigation account = {account} setAccount = {setAccount} />\n\n          <div className=\"channels\">\n              <Candidates candidates = {candidates} provider = {providers} account = {account} voting = {voting} onAddCandidate={addCandidate}/>\n          </div>\n      </div>\n    );\n  }\n\n  export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}