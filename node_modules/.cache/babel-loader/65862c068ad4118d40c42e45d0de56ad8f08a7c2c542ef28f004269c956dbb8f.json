{"ast":null,"code":"var _jsxFileName = \"/Users/utilisateur/exercise/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { useRef } from 'react';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Candidates from './components/Candidates';\nimport Candidate from './components/Candidate';\n\n// ABIs\nimport Voting from './abis/Voting.json';\n\n// Config\nimport config from './config.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [providers, setProvider] = useState(null);\n  const [voting, setVoting] = useState(null);\n  const [candidates, setCandidates] = useState([]);\n  const [contractOwner, setContractOwner] = useState(null);\n  const [toggle, setToggle] = useState(false);\n  const [candidate, setCandidate] = useState({});\n  const candidateNameRef = useRef();\n  const candidateAddressRef = useRef();\n  const loadBlockchainData = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(provider);\n    const network = await provider.getNetwork();\n    const voting = new ethers.Contract(config[network.chainId].Voting.address, Voting.abi, provider);\n    setVoting(voting);\n    try {\n      const contractOwner = await voting.owner();\n      setContractOwner(contractOwner);\n    } catch (error) {\n      console.error('Error fetching contract owner:', error);\n      alert('Error fetching contract owner. Please make sure the contract is deployed correctly.');\n    }\n    const [candidateAddresses, candidateNames, candidateIds, candidateVoteCounts] = await voting.getAllCandidates();\n    const candidateArray = candidateAddresses.map((candidateAddress, index) => {\n      return {\n        address: candidateAddress,\n        name: candidateNames[index],\n        id: candidateIds[index],\n        voteCount: candidateVoteCounts[index]\n      };\n    });\n    setCandidates(candidateArray);\n    window.ethereum.on('accountsChanged', async () => {\n      window.location.reload();\n    });\n  };\n  const addCandidate = async (candidateAddress, candidateName, candidateId) => {\n    if (!account) {\n      alert('Please connect your account first');\n      return;\n    }\n    if (!voting) {\n      alert('Voting contract not loaded');\n      return;\n    }\n    if (account !== contractOwner) {\n      alert('Only the contract owner can add candidates');\n      console.log(contractOwner);\n      return;\n    }\n    try {\n      const signer = providers.getSigner();\n      const votingWithSigner = voting.connect(signer);\n      const nonce = await providers.getTransactionCount(account);\n      const normalizedCandidateAddress = ethers.utils.getAddress(candidateAddress);\n      const tx = await votingWithSigner.addCandidate(normalizedCandidateAddress, candidateName, candidateId, {\n        nonce\n      });\n      await tx.wait();\n      alert('Candidate added successfully');\n      window.location.reload();\n    } catch (error) {\n      console.error('Error adding candidate:', error);\n      alert('Error adding candidate. Please try again.');\n    }\n  };\n  const togglePop = candidate => {\n    setCandidate(candidate);\n    toggle ? setToggle(false) : setToggle(true);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const candidateName = candidateNameRef.current.value.trim();\n    const candidateAddress = candidateAddressRef.current.value.trim();\n    if (candidateName) {\n      await addCandidate(candidateAddress, candidateName, Candidates.length);\n      candidateNameRef.current.value = '';\n      togglePop();\n    }\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home__overview\",\n      children: /*#__PURE__*/_jsxDEV(Candidates, {\n        candidates: candidates,\n        provider: providers,\n        account: account,\n        voting: voting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home\",\n        onClick: () => togglePop(candidates),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"home_details\",\n          children: \"Add a candidate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }, this), toggle && /*#__PURE__*/_jsxDEV(Candidate, {\n      candidates: candidates,\n      provider: providers,\n      account: account,\n      handleSubmit: handleSubmit,\n      addCandidate: addCandidate,\n      togglePop: togglePop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"sYKqJRLRRxdXWvmOS3RLwQ/g1JU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","useRef","Navigation","Candidates","Candidate","Voting","config","jsxDEV","_jsxDEV","App","_s","account","setAccount","providers","setProvider","voting","setVoting","candidates","setCandidates","contractOwner","setContractOwner","toggle","setToggle","candidate","setCandidate","candidateNameRef","candidateAddressRef","loadBlockchainData","provider","Web3Provider","window","ethereum","network","getNetwork","Contract","chainId","address","abi","owner","error","console","alert","candidateAddresses","candidateNames","candidateIds","candidateVoteCounts","getAllCandidates","candidateArray","map","candidateAddress","index","name","id","voteCount","on","location","reload","addCandidate","candidateName","candidateId","log","signer","getSigner","votingWithSigner","connect","nonce","getTransactionCount","normalizedCandidateAddress","utils","getAddress","tx","wait","togglePop","handleSubmit","event","preventDefault","current","value","trim","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["/Users/utilisateur/exercise/src/App.js"],"sourcesContent":["  import { useEffect, useState } from 'react'\n  import { ethers } from 'ethers'\n  import { useRef } from 'react';\n\n  // Components\n  import Navigation from './components/Navigation'\n  import Candidates from './components/Candidates'\n  import Candidate from './components/Candidate'\n\n  // ABIs\n  import Voting from './abis/Voting.json'\n\n  // Config\n  import config from './config.json'\n\n  function App() {\n\n    const [account, setAccount] = useState(null)\n    const [providers, setProvider] = useState(null)\n\n    const [voting, setVoting] = useState(null)\n    const [candidates, setCandidates] = useState([])\n\n    const [contractOwner, setContractOwner] = useState(null);\n    const [toggle, setToggle] = useState(false);\n    const [candidate, setCandidate] = useState({});\n\n    const candidateNameRef = useRef();\n    const candidateAddressRef = useRef();\n\n\n\n    const loadBlockchainData = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      setProvider(provider);\n\n      const network = await provider.getNetwork();\n\n      const voting = new ethers.Contract(config[network.chainId].Voting.address, Voting.abi, provider);\n      setVoting(voting);\n\n      try {\n        const contractOwner = await voting.owner();\n        setContractOwner(contractOwner);\n      } catch (error) {\n        console.error('Error fetching contract owner:', error);\n        alert('Error fetching contract owner. Please make sure the contract is deployed correctly.');\n      }\n\n      const [candidateAddresses, candidateNames, candidateIds, candidateVoteCounts] = await voting.getAllCandidates();\n      const candidateArray = candidateAddresses.map((candidateAddress, index) => {\n        return {\n          address: candidateAddress,\n          name: candidateNames[index],\n          id: candidateIds[index],\n          voteCount: candidateVoteCounts[index],\n        };\n      });\n      setCandidates(candidateArray);\n\n      window.ethereum.on('accountsChanged', async () => {\n        window.location.reload();\n      });\n    };\n\n\n\n    const addCandidate = async (candidateAddress, candidateName, candidateId) => {\n      if (!account) {\n        alert('Please connect your account first');\n        return;\n      }\n\n      if (!voting) {\n        alert('Voting contract not loaded');\n        return;\n      }\n\n      if (account !== contractOwner) {\n        alert('Only the contract owner can add candidates');\n        console.log(contractOwner)\n        return;\n      }\n\n      try {\n        const signer = providers.getSigner();\n        const votingWithSigner = voting.connect(signer);\n        const nonce = await providers.getTransactionCount(account);\n\n        const normalizedCandidateAddress = ethers.utils.getAddress(candidateAddress);\n\n        const tx = await votingWithSigner.addCandidate(normalizedCandidateAddress, candidateName, candidateId, { nonce });\n        await tx.wait();\n\n        alert('Candidate added successfully');\n        window.location.reload();\n      } catch (error) {\n        console.error('Error adding candidate:', error);\n        alert('Error adding candidate. Please try again.');\n      }\n    };\n\n\n    const togglePop = (candidate) => {\n      setCandidate(candidate);\n      toggle ? setToggle(false) : setToggle(true);\n    };\n\n\n\n    const handleSubmit = async (event) => {\n      event.preventDefault();\n      const candidateName = candidateNameRef.current.value.trim();\n      const candidateAddress = candidateAddressRef.current.value.trim();\n\n      if (candidateName) {\n        await addCandidate(candidateAddress, candidateName, Candidates.length);\n        candidateNameRef.current.value = '';\n        togglePop();\n      }\n    };\n\n\n    useEffect(() => {\n      loadBlockchainData()\n    }, [])\n\n\n\n    return (\n      <div>\n        <Navigation account = {account} setAccount = {setAccount} />\n\n          <div className='home__overview'>\n              <Candidates candidates = {candidates} provider = {providers} account = {account} voting = {voting} />\n          </div>\n\n          <div className='home'>\n                <div className='home' onClick={() => togglePop(candidates)}>\n                  <div className='home_details'>\n                    Add a candidate\n                  </div>\n                </div>\n\n          </div>\n\n        {toggle && (\n          <Candidate candidates = {candidates} provider = {providers} account = {account} handleSubmit = {handleSubmit} addCandidate = {addCandidate} togglePop = {togglePop} />\n        )}\n      </div>\n    );\n  }\n\n  export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}